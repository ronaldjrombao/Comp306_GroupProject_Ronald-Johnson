trigger:
  none

pool:
  name: "Comp367_SH_Agent"

variables:
  projectName: 'BudgetManagementAPI'
  testProject: 'BudgetManagementAPI.Test'
  dockerHubRepo: 'ronaldjrombao/comp367group'
  dockerfilePath: './Dockerfile'
  shortSha: $[substring(variables['Build.SourceVersion'], 0, 8)]

stages:
- stage: SonarQubeAnalysis
  displayName: Code Analysis and Coverage
  jobs:
  - job: Analysis
    displayName: Run SonarQube with Code Coverage
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.407'

    - script: dotnet restore Ombao_EjehComp306.sln
      displayName: 'Restore Solution'

    - task: SonarQubePrepare@7
      inputs:
        SonarQube: 'SonarqubeLocal'
        scannerMode: 'dotnet'
        projectKey: 'Comp367BudgetAPI'
        projectName: 'Comp367BudgetAPI'
        extraProperties: |
          sonar.cs.opencover.reportsPaths=$(testProject)/TestResults/coverage.opencover.xml

    - script: dotnet build $(projectName)/$(projectName).csproj --no-incremental
      displayName: 'Build Project'

    - script: |
        dotnet test $(testProject)/$(testProject).csproj \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=opencover \
          /p:CoverletOutput=./TestResults/coverage.opencover.xml
      displayName: 'Run Tests with Coverage'

    - task: SonarQubeAnalyze@7
      displayName: 'Run SonarQube Analysis'

    - task: SonarQubePublish@7
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publish SonarQube Report'

- stage: BuildAndPush
  displayName: Build & Push Docker Image
  dependsOn: SonarQubeAnalysis
  jobs:
  - job: DockerBuildPush
    displayName: Build and Push Docker Image
    steps:
    - task: Docker@2
      displayName: 'Login to Docker Hub'
      inputs:
        command: login
        containerRegistry: 'DockerHub'

    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: build
        Dockerfile: $(dockerfilePath)
        tags: |
          $(dockerHubRepo):api_latest
          $(dockerHubRepo):$(shortSha)

    - task: Docker@2
      displayName: 'Push Docker Image'
      inputs:
        command: push
        tags: |
          $(dockerHubRepo):latest
          $(dockerHubRepo):$(shortSha)
